#include<stdio.h>
#include<stdlib.h>
struct node {
    struct node *prev;
    int data;
    struct node *next;
};

struct node *add_to_empty(struct node *head, int data) {
    struct node *temp = malloc(sizeof(struct node));
    temp->prev = NULL;
    temp->data = data;
    temp->next = NULL;
    head = temp;
    return head;
}

struct node *add_at_beg(struct node *head,int data) {
    struct node *temp = malloc(sizeof(struct node));
    temp->prev = NULL;
    temp->data = data;
    temp->next = NULL;
    temp->next = head;
    head->prev = temp;
    head = temp;
    return head;
}

struct node *add_at_end(struct node *head, int data) {
    struct node *temp = malloc(sizeof(struct node));
    struct node *ptr = head;
    temp->prev = NULL;
    temp->data = data;
    temp->next = NULL;
    while(ptr->next!=NULL) {
        ptr = ptr->next;
    }
    ptr->next = temp;
    temp->prev = ptr;
    return head;
    
}

struct node *add_at_pos(struct node *head, int data, int pos) {
    struct node *temp = head;
    struct node *temp2 = NULL;
    struct node *new = NULL;
    new = add_to_empty(new, data);
    while(pos!=1) {
        temp = temp->next;
        pos--;
    }
    if(temp->next == NULL) {
        temp->next = new;
        new->prev = temp;
    }
    else {
    temp2 = temp->next;
    temp->next = new;
    temp2->prev = new;
    new->prev = temp;
    new->next = temp2;
    }
    return head;
}

struct node *createlist(struct node *head) {
    int n , data , i;
    scanf("%d",&n);
    if(n==0) {
        return head;
    }
    else {
        printf("Enter the leemnt for node 1 \n");
        scanf("%d",&data);
        head = add_to_empty(head,data);
    }
    for(i=1;i<n;i++) {
        printf("Enter element for node %d \n",i+1);
        scanf("%d",&data);
        head = add_at_end(head,data);
    }
    return head;
}

struct node *del_at_first(struct node *head) {
    head = head->next; //method 2
    free(head->prev);
    return head;
}

struct node *del_at_last(struct node *head) {
    struct node *temp = head;
    struct node *temp2;
    while(temp->next!=NULL) {
        temp = temp->next;
    }
    temp2 = temp->prev;
    temp2->next = NULL;
    free(temp);
    temp = NULL;
    return head;
}

struct node *del_at_pos(struct node *head, int pos) {
    struct node *temp = head;
    struct node *temp2 = NULL;
    if(pos==1) {
        head = del_at_first(head);
        return head;
    }
    while(pos>1) {
        temp = temp->next;
        pos--;
    }
    if(temp->next == NULL) {
        head = del_at_last(head);
    }
    else {
    temp2 = temp->prev;
    temp2->next = temp->next;
    temp->next->prev = temp2;
    free(temp);
    temp = NULL;
    }
    return head;
}

struct node *reverse (struct node *head) {
    struct node *ptr1 = head;
    struct node *ptr2 = ptr1->next;
    ptr1->next = NULL;
    ptr1->prev = ptr2;
    while(ptr2!=NULL) {
      ptr2->prev = ptr2->next;
      ptr2->next = ptr1;
      ptr1 = ptr2;
      ptr2 = ptr2->prev;
    }
    head = ptr1;
    return head;
}
int main() {
    struct node *head = malloc(sizeof(struct node));
    struct node *ptr;
    
    head->prev = NULL;
    head->data = 10;
    head->next = NULL;
    head = add_to_empty(head,20);
    head = add_at_beg(head,30);
    head = add_at_end(head,40);
    head = add_at_pos(head,50,2);
    //head = del_at_first(head);
    //head = del_at_last(head);
    //head = del_at_pos(head,2);
    //head = createlist(head);
    
    
    printf("Elements are \n");
    ptr = head;
    while(ptr!=NULL) {
    printf("%d \n",ptr->data);
    ptr=ptr->next;
    }
    
    printf("After reverse \n");
    
    head = reverse(head);
    ptr = head;
    while(ptr!=NULL) {
    printf("%d \n",ptr->data);
    ptr=ptr->next;
    }
    
    /* add before specified pos while(pos>2)
    if(pos==1) {
        head = add_at_beg(head , data)
    }
    else
    {
        same
    }
    } */
    return 0;
}
