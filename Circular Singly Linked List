#include<stdio.h>
#include<stdlib.h>
struct node {
    int data;
    struct node *next;
};

struct node *add_to_empty(int data) {
    struct node *temp = malloc(sizeof(struct node));
    temp->data = data;
    temp->next = temp;
    return temp;
}

struct node *add_to_beg(struct node *tail,int data) {
    struct node *temp = malloc(sizeof(struct node));
    temp->data = data;
    temp->next = tail->next; //tail->next to point first node
    tail->next = temp;
    return tail;
}

struct node *add_at_end(struct node *tail,int data) {
    struct node *temp = malloc(sizeof(struct node));
    temp->data = data;
    temp->next = tail->next;
    tail->next = temp;
    tail = tail->next;
    return tail;
}

struct node *add_at_pos(struct node *tail, int data, int pos) { //after pos
    struct node *temp = malloc(sizeof(struct node));
    struct node *ptr = tail->next;
    temp->data = data;
    temp->next =NULL;
    while(pos>1) {
        ptr = ptr->next;
        pos--;
    }
    temp->next = ptr->next;  
    ptr->next = temp;  
    if(ptr==tail) {
        tail = tail->next;
    }
    return tail;
}

void print(struct node* tail) {
   
    if(tail==NULL) {
        printf("Empty. \n");
    }
        else {
             struct node *ptr = tail->next;
    do {
        printf("%d ",ptr->data);
        ptr = ptr->next;
    } while(ptr!=tail->next);
        }
}

struct node *del_first(struct node *tail) {
    if(tail==NULL) {
        return tail;
    }
    if(tail->next == tail) {
        free(tail);
        tail = NULL;
        return tail;
    }
    struct node *temp;
    temp = tail->next;
    tail->next = temp->next;
    free(temp);
    temp =NULL;
    return tail; 
}

struct node *del_last(struct node *tail) {
    if(tail==NULL) {
        return tail;
    }
    struct node *temp = tail->next;
    if(tail->next == tail) {
        free(tail);
        tail = NULL;
        return tail;
    }
    while(temp->next!=tail) {
        temp = temp->next;
    }
    temp->next = tail->next;
    free(tail);
    tail = temp;
    return tail;
}
struct node *createlist(struct node *tail) {
    int i,n,data;
    printf("Enter the number of elements. \n");
    scanf("%d",&n);
    if(n==0) {
        return tail;
    }
    printf("Enter element 1 :\n");
    scanf("%d",&data);
    tail = add_to_empty(data);
    for(i=1;i<n;i++) {
        printf("Enter element %d",i+1);
        scanf("%d",&data);
        tail = add_at_end(tail,data);
    }
    return tail;
}

struct node *del_pos(struct node *tail,int pos) { //at pos
    if(tail==NULL) {
        return tail;
    }
    struct node *temp = tail->next;
    if(tail->next == tail) {
        free(tail);
        tail = NULL;
        return tail;
    }
    while(pos>2) {
        temp = temp->next;
        pos--;
    }
    struct node *temp2;
    temp2 = temp->next;
    temp->next = temp2->next;
    free(temp2);
    temp2 = NULL;
    return tail;
}

int searching(struct node *tail, int ele) {
        struct node *temp;
        int index = 0;
        if(tail==NULL)
        return -2;
        temp = tail->next;
        do {
            if(temp->data == ele)
            return index;
            temp = temp->next;
            index++;
        }while(temp!=tail->next);
        return -1;
}

void countelements(struct node *tail) {
    struct node *ptr = tail->next;
    int count = 0;
    while(ptr!=tail) {
        ptr = ptr->next;
        count++;
    }
    count++;
    printf("There are %d elements. \n",count);
}
int main() {
    //int data = 34;
    struct node *tail;
    tail = add_to_empty(35);
    tail = add_to_beg(tail,55);
    tail = add_at_end(tail,65);
    tail = add_at_pos(tail,75,2);
    tail = del_last(tail);
    tail = del_first(tail);
    //tail = createlist(tail);
    print(tail);
    countelements(tail);
    int index = searching(tail,35);
    if(index == -1)
    printf("Element not found\n");
    else if(index == -2) 
    printf("Linked list is empty\n");
    else
    printf("Index is %d\n",index);
    return 0;
    //tail->next imp not tail
}
