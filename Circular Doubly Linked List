#include<stdio.h>
#include<stdlib.h>
struct node {
    struct node *prev;
    int data;
    struct node *next;
};
struct node *add_to_empty(int data) {
    struct node *temp = malloc(sizeof(struct node));
    temp->next = temp;
    temp->prev = temp;
    temp->data = data;
    return temp;
}

struct node *add_at_beg(struct node *tail, int data) {
    struct node *new  = add_to_empty(data);
    if(tail == NULL) {
        return new;
    }
    else {
        struct node *temp = tail->next;
        new->next = temp;;
        new->prev = tail;
        temp->prev = new;
        tail->next = new;
        return tail;
    }
}

struct node *add_at_end(struct node *tail,int data) {
    struct node *new = add_to_empty(data);
    if(tail == NULL) {
        printf("Empty. \n");
    }
    else {
    struct node *temp = tail->next;
    new->prev = tail;
    new->next = temp;
    tail->next = new;
    temp->prev = new;
    tail = new;
    return tail;
}
}

struct node *add_at_pos(struct node *tail,int data,int pos) {
    struct node *new = add_to_empty(data);
    if(tail==NULL) {
        printf("Empty. \n");
        return new;
    }
    struct node *temp = tail->next;
    while(pos>1) {
        temp = temp->next;
        pos--;
    }
    new->prev = temp;
    new->next = temp->next;
    temp->next->prev = new;
    temp->next = new;
    if(temp==tail) 
        tail = tail->next;
    return tail;
}

struct node *del_at_first(struct node *tail) {
    if(tail==NULL) {
        return tail;
    }
    struct node *temp = tail->next;
    if(temp == tail) {
        free(tail);
        tail = NULL;
        return tail;
    }
    tail->next = temp->next;
    temp->next->prev = tail;
    free(temp);
    return tail;
}

struct node *del_at_end(struct node *tail) {
    struct node *temp;
    if(tail==NULL) {
        return tail;
    }
    if(temp==tail) {
        free(tail);
        tail = NULL;
        return tail;
    }
    temp = tail->prev;
    temp->next = tail->next;
    tail->next->prev = temp;
    free(tail);
    tail = temp;
    return tail;
    
}

struct node *del_at_pos(struct node *tail,int pos) {
    struct node *temp = tail->next;
    while(pos>1) {
        temp = temp->next;
        pos--;
    }
    struct node *temp2 = temp->prev;
    temp2->next = temp->next;
    temp->next->prev = temp2;
    free(temp);
    if(temp == tail) 
        tail= temp2;
        return tail;
}

void print(struct node *tail) {
    if(tail == NULL) {
        printf("Linked list is empty.");
    }
    else {
        struct node *temp = tail->next;
        do {
            printf("%d ",temp->data);
            temp = temp->next;
        }while(temp!=tail->next);
    }
}

int main() {
    int data = 34;
    struct node *tail = NULL;
    tail = add_to_empty(data);
    tail = add_at_end(tail,45);
    tail = add_at_beg(tail,6);
    tail = add_at_pos(tail,56,2);
    printf("Before deleting \n");
    print(tail);
    printf("\nAfter deleting \n");
    tail = del_at_first(tail);
    tail = del_at_end(tail);
    tail = del_at_pos(tail,2);
    print(tail);
    return 0;
}
